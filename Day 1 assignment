question 1 :


class Solution {
 public:
  int findMinArrowShots(vector<vector<int>>& points) {
    ranges::sort(points,
                 [](const auto& a, const auto& b) { return a[1] < b[1]; });

    int ans = 1;
    int arrowX = points[0][1];

    for (int i = 1; i < points.size(); ++i)
      if (points[i][0] > arrowX) {
        arrowX = points[i][1];
        ++ans;
      }

    return ans;
  }
};

question 2 : 

public int[] maxSlidingWindow(int[] nums, int k) {
    int[] arr = new int[nums.length-k+1];
    int in = 0 ;
    for(int i=0;i<nums.length;i++){
        if(i+k>nums.length) break;
        int max = Integer.MIN_VALUE;
        for(int j=i;j<k+i;j++){
            max=Math.max(max,nums[j]);
        }
        arr[in++]=max;
    }
    return arr;
}



question 3 :


class Solution {
 public:
  vector<int> searchRange(vector<int>& nums, int target) {
    return {firstPos(nums, target), lastPos(nums, target)};
  }

  int firstPos(vector<int>& nums, int target) {
    int l = 0, r = nums.size() - 1, ans = -1;
    while (l <= r) {
      int mid = l + (r - l) / 2;
      if (nums[mid] >= target) r = mid - 1;
      else l = mid + 1;
      if (nums[mid] == target) ans = mid;
    }
    return ans;
  }

  int lastPos(vector<int>& nums, int target) {
    int l = 0, r = nums.size() - 1, ans = -1;
    while (l <= r) {
      int mid = l + (r - l) / 2;
      if (nums[mid] <= target) l = mid + 1;
      else r = mid - 1;
      if (nums[mid] == target) ans = mid;
    }
    return ans;
  }
};
